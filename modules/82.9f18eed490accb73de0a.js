"use strict";(self.webpackChunkfederation_modules=self.webpackChunkfederation_modules||[]).push([[82],{82:(r,e,t)=>{t.r(e),e.default=function(r){if(r.length>=255)throw new TypeError("Alphabet too long");const e=new Uint8Array(256);for(let r=0;r<e.length;r++)e[r]=255;for(let t=0;t<r.length;t++){const n=r.charAt(t),o=n.charCodeAt(0);if(255!==e[o])throw new TypeError(n+" is ambiguous");e[o]=t}const t=r.length,n=r.charAt(0),o=Math.log(t)/Math.log(256),f=Math.log(256)/Math.log(t);function a(r){if("string"!=typeof r)throw new TypeError("Expected String");if(0===r.length)return new Uint8Array;let f=0,a=0,i=0;for(;r[f]===n;)a++,f++;const l=(r.length-f)*o+1>>>0,c=new Uint8Array(l);for(;f<r.length;){const n=r.charCodeAt(f);if(n>255)return;let o=e[n];if(255===o)return;let a=0;for(let r=l-1;(0!==o||a<i)&&-1!==r;r--,a++)o+=t*c[r]>>>0,c[r]=o%256>>>0,o=o/256>>>0;if(0!==o)throw new Error("Non-zero carry");i=a,f++}let h=l-i;for(;h!==l&&0===c[h];)h++;const s=new Uint8Array(a+(l-h));let u=a;for(;h!==l;)s[u++]=c[h++];return s}return{encode:function(e){if(e instanceof Uint8Array||(ArrayBuffer.isView(e)?e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength):Array.isArray(e)&&(e=Uint8Array.from(e))),!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===e.length)return"";let o=0,a=0,i=0;const l=e.length;for(;i!==l&&0===e[i];)i++,o++;const c=(l-i)*f+1>>>0,h=new Uint8Array(c);for(;i!==l;){let r=e[i],n=0;for(let e=c-1;(0!==r||n<a)&&-1!==e;e--,n++)r+=256*h[e]>>>0,h[e]=r%t>>>0,r=r/t>>>0;if(0!==r)throw new Error("Non-zero carry");a=n,i++}let s=c-a;for(;s!==c&&0===h[s];)s++;let u=n.repeat(o);for(;s<c;++s)u+=r.charAt(h[s]);return u},decodeUnsafe:a,decode:function(r){const e=a(r);if(e)return e;throw new Error("Non-base"+t+" character")}}}}}]);